name: Test Suite

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

jobs:
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 10

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      # --- Lockfile Sync Check (added section) ---
      - name: Check lockfile sync
        run: |
          pnpm install --frozen-lockfile || {
            echo "❌ Lockfile is out of sync with package.json."
            echo "Please run 'pnpm install' locally to update pnpm-lock.yaml and commit it."
            exit 1
          }

      # --- Install & Run Tests ---
      - run: pnpm run typecheck
      - run: pnpm run test:run
      - run: pnpm run test:coverage

      - uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

  backend-tests:
    name: Backend Tests (Python API)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"

      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov httpx

      - run: |
          # Test API startup and basic functionality
          python -c "
          import sys
          sys.path.append('.')
          try:
              import api.main
              print('✅ API module imports successfully')
          except Exception as e:
              print(f'❌ API import failed: {e}')
              sys.exit(1)
          "

      - run: |
          # Test API endpoints if test file exists
          if [ -f "test_api.py" ]; then
            python test_api.py
          else
            echo "No API test file found, skipping API tests"
          fi

      - run: |
          # Compile check for all Python files
          python -m py_compile start_api.py
          python -m py_compile config.py
          find api -name "*.py" -exec python -m py_compile {} \;
          find src -name "*.py" -exec python -m py_compile {} \;

  python-ml-tests:
    name: Python ML Pipeline Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"

      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - run: |
          if [ -d "tests" ] || [ -f "test_*.py" ] || find . -name "*_test.py" | grep -q .; then
            python -m pytest --cov=src --cov-report=xml --cov-report=term
          else
            echo "No Python tests found, skipping..."
          fi

      - run: |
          python -m py_compile main.py
          python -m py_compile config.py
          find src -name "*.py" -exec python -m py_compile {} \;

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"

      - uses: pnpm/action-setup@v4
        with:
          version: 10

      - uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "pnpm"

      # --- Install Python dependencies ---
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # --- Start Python backend ---
      - run: |
          python start_api.py --host 0.0.0.0 --port 8000 &
          echo $! > backend.pid
        env:
          PORT: 8000
          ENVIRONMENT: "test"

      # --- Wait for backend to be ready ---
      - run: |
          echo "Waiting for backend to be ready..."
          for i in {1..60}; do
            if curl -fsS http://localhost:8000/health >/dev/null; then
              echo "Backend is up"; break; fi
            sleep 1
          done
          curl -f http://localhost:8000/health

      # --- Install frontend dependencies ---
      - name: Install frontend dependencies
        run: pnpm install
        working-directory: frontend

      # --- Build frontend ---
      - run: pnpm build
        working-directory: frontend
        env:
          VITE_API_URL: http://localhost:8000

      # --- Test API endpoints ---
      - run: |
          # Test basic API endpoints
          curl -f http://localhost:8000/health
          curl -f http://localhost:8000/status
          curl -f http://localhost:8000/docs

      # --- Cleanup ---
      - run: |
          if [ -f backend.pid ]; then
            kill $(cat backend.pid) || true
            rm backend.pid
          fi
